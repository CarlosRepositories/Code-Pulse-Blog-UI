{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ImageService {\n  constructor(htpp) {\n    this.htpp = htpp;\n    this.selectedImage = new BehaviorSubject({\n      id: '',\n      fileExtension: '',\n      fileName: '',\n      title: '',\n      url: ''\n    });\n  }\n  getAllImages() {\n    return this.htpp.get(`${environment.appBaseUrl}Images`);\n  }\n  upload(file, fileName, title) {\n    const formData = new FormData();\n    formData.append('File', file);\n    formData.append('fileName', fileName);\n    formData.append('title', title);\n    return this.htpp.post(`${environment.appBaseUrl}Images`, formData);\n  }\n  selectImage(image) {\n    this.selectedImage.next(image);\n  }\n  onSelectImage() {\n    return this.selectedImage.asObservable();\n  }\n  static #_ = this.ɵfac = function ImageService_Factory(t) {\n    return new (t || ImageService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ImageService,\n    factory: ImageService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { ImageService };","map":{"version":3,"names":["BehaviorSubject","environment","ImageService","constructor","htpp","selectedImage","id","fileExtension","fileName","title","url","getAllImages","get","appBaseUrl","upload","file","formData","FormData","append","post","selectImage","image","next","onSelectImage","asObservable","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\carrl\\OneDrive\\Área de Trabalho\\estudos\\Angular\\UI\\codepulse\\src\\app\\shared\\components\\image-selector\\image.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { BlogImage } from './models/blog-Image.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageService {\n\n  selectedImage: BehaviorSubject<BlogImage> =  new BehaviorSubject<BlogImage>({\n    id: '',\n    fileExtension: '',\n    fileName: '',\n    title: '',\n    url: ''\n  });\n\n  constructor(private htpp: HttpClient) { }\n\n  getAllImages() : Observable<BlogImage[]> {\n    return this.htpp.get<BlogImage[]>(`${environment.appBaseUrl}Images`)\n  }\n\n  upload(file: File, fileName: string, title: string) : Observable<BlogImage>{\n    \n    const formData = new FormData();\n    formData.append('File', file);\n    formData.append('fileName', fileName);\n    formData.append('title', title);\n\n    return this.htpp.post<BlogImage>(`${environment.appBaseUrl}Images`, formData);\n  }\n\n  selectImage(image:BlogImage) : void{\n    this.selectedImage.next(image);\n  }\n\n  onSelectImage(): Observable<BlogImage>{\n    return this.selectedImage.asObservable();\n  }\n\n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,WAAW,QAAQ,8BAA8B;;;AAG1D,MAGaC,YAAY;EAUvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IARxB,KAAAC,aAAa,GAAgC,IAAIL,eAAe,CAAY;MAC1EM,EAAE,EAAE,EAAE;MACNC,aAAa,EAAE,EAAE;MACjBC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,GAAG,EAAE;KACN,CAAC;EAEsC;EAExCC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAc,GAAGX,WAAW,CAACY,UAAU,QAAQ,CAAC;EACtE;EAEAC,MAAMA,CAACC,IAAU,EAAEP,QAAgB,EAAEC,KAAa;IAEhD,MAAMO,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAC7BC,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEV,QAAQ,CAAC;IACrCQ,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAET,KAAK,CAAC;IAE/B,OAAO,IAAI,CAACL,IAAI,CAACe,IAAI,CAAY,GAAGlB,WAAW,CAACY,UAAU,QAAQ,EAAEG,QAAQ,CAAC;EAC/E;EAEAI,WAAWA,CAACC,KAAe;IACzB,IAAI,CAAChB,aAAa,CAACiB,IAAI,CAACD,KAAK,CAAC;EAChC;EAEAE,aAAaA,CAAA;IACX,OAAO,IAAI,CAAClB,aAAa,CAACmB,YAAY,EAAE;EAC1C;EAAC,QAAAC,CAAA,G;qBAhCUvB,YAAY,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZ5B,YAAY;IAAA6B,OAAA,EAAZ7B,YAAY,CAAA8B,IAAA;IAAAC,UAAA,EAFX;EAAM;;SAEP/B,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}